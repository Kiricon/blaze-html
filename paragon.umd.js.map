{"version":3,"file":"paragon.umd.js","sources":["node_modules/lit-html/lit-html.js","src/paragon.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n// The first argument to JS template tags retain identity across multiple\n// calls to a tag for the same literal, so we can cache work done per literal\n// in a Map.\nexport const templateCaches = new Map();\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html');\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg');\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, partCallback = defaultPartCallback) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.partCallback = partCallback;\n    }\n    /**\n     * Returns a string of HTML used to create a <template> element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isTextBinding = true;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            html += s;\n            // We're in a text position if the previous string closed its tags.\n            // If it doesn't have any tags, then we use the previous text position\n            // state.\n            const closing = findTagClose(s);\n            isTextBinding = closing > -1 ? closing < s.length : isTextBinding;\n            html += isTextBinding ? nodeMarker : marker;\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTMl in an <svg> tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the <svg> tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function defaultTemplateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = new Map();\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n        template = new Template(result, result.getTemplateElement());\n        templateCache.set(result.strings, template);\n    }\n    return template;\n}\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param templateFactory a function to create a Template or retreive one from\n *     cache.\n */\nexport function render(result, container, templateFactory = defaultTemplateFactory) {\n    const template = templateFactory(result);\n    let instance = container.__templateInstance;\n    // Repeat render, just call update()\n    if (instance !== undefined && instance.template === template &&\n        instance._partCallback === result.partCallback) {\n        instance.update(result.values);\n        return;\n    }\n    // First render, create a new TemplateInstance and append it\n    instance =\n        new TemplateInstance(template, result.partCallback, templateFactory);\n    container.__templateInstance = instance;\n    const fragment = instance._clone();\n    instance.update(result.values);\n    removeNodes(container, container.firstChild);\n    container.appendChild(fragment);\n}\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nconst marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-posisitions, not attribute positions,\n * in template.\n */\nconst nodeMarker = `<!--${marker}-->`;\nconst markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#attributes-0\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-character\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nconst lastAttributeNameRegex = /[ \\x09\\x0a\\x0c\\x0d]([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)[ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*)$/;\n/**\n * Finds the closing index of the last closed HTML tag.\n * This has 3 possible return values:\n *   - `-1`, meaning there is no tag in str.\n *   - `string.length`, meaning the last opened tag is unclosed.\n *   - Some positive number < str.length, meaning the index of the closing '>'.\n */\nfunction findTagClose(str) {\n    const close = str.lastIndexOf('>');\n    const open = str.indexOf('<', close + 1);\n    return open > -1 ? str.length : close;\n}\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport class TemplatePart {\n    constructor(type, index, name, rawName, strings) {\n        this.type = type;\n        this.index = index;\n        this.name = name;\n        this.rawName = rawName;\n        this.strings = strings;\n    }\n}\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const content = this.element.content;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(content, 133 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT |\n               NodeFilter.SHOW_TEXT */, null, false);\n        let index = -1;\n        let partIndex = 0;\n        const nodesToRemove = [];\n        // The actual previous node, accounting for removals: if a node is removed\n        // it will never be the previousNode.\n        let previousNode;\n        // Used to set previousNode at the top of the loop.\n        let currentNode;\n        while (walker.nextNode()) {\n            index++;\n            previousNode = currentNode;\n            const node = currentNode = walker.currentNode;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (!node.hasAttributes()) {\n                    continue;\n                }\n                const attributes = node.attributes;\n                // Per https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                // attributes are not guaranteed to be returned in document order. In\n                // particular, Edge/IE can return them out of order, so we cannot assume\n                // a correspondance between part index and attribute index.\n                let count = 0;\n                for (let i = 0; i < attributes.length; i++) {\n                    if (attributes[i].value.indexOf(marker) >= 0) {\n                        count++;\n                    }\n                }\n                while (count-- > 0) {\n                    // Get the template literal section leading up to the first\n                    // expression in this attribute attribute\n                    const stringForPart = result.strings[partIndex];\n                    // Find the attribute name\n                    const attributeNameInPart = lastAttributeNameRegex.exec(stringForPart)[1];\n                    // Find the corresponding attribute\n                    const attribute = attributes.getNamedItem(attributeNameInPart);\n                    const stringsForAttributeValue = attribute.value.split(markerRegex);\n                    this.parts.push(new TemplatePart('attribute', index, attribute.name, attributeNameInPart, stringsForAttributeValue));\n                    node.removeAttribute(attribute.name);\n                    partIndex += stringsForAttributeValue.length - 1;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const nodeValue = node.nodeValue;\n                if (nodeValue.indexOf(marker) < 0) {\n                    continue;\n                }\n                const parent = node.parentNode;\n                const strings = nodeValue.split(markerRegex);\n                const lastIndex = strings.length - 1;\n                // We have a part for each match found\n                partIndex += lastIndex;\n                // We keep this current node, but reset its content to the last\n                // literal part. We insert new literal nodes before this so that the\n                // tree walker keeps its position correctly.\n                node.textContent = strings[lastIndex];\n                // Generate a new text node for each literal section\n                // These nodes are also used as the markers for node parts\n                for (let i = 0; i < lastIndex; i++) {\n                    parent.insertBefore(document.createTextNode(strings[i]), node);\n                    this.parts.push(new TemplatePart('node', index++));\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */ &&\n                node.nodeValue === marker) {\n                const parent = node.parentNode;\n                // Add a new marker node to be the startNode of the Part if any of the\n                // following are true:\n                //  * We don't have a previousSibling\n                //  * previousSibling is being removed (thus it's not the\n                //    `previousNode`)\n                //  * previousSibling is not a Text node\n                //\n                // TODO(justinfagnani): We should be able to use the previousNode here\n                // as the marker node and reduce the number of extra nodes we add to a\n                // template. See https://github.com/PolymerLabs/lit-html/issues/147\n                const previousSibling = node.previousSibling;\n                if (previousSibling === null || previousSibling !== previousNode ||\n                    previousSibling.nodeType !== Node.TEXT_NODE) {\n                    parent.insertBefore(document.createTextNode(''), node);\n                }\n                else {\n                    index--;\n                }\n                this.parts.push(new TemplatePart('node', index++));\n                nodesToRemove.push(node);\n                // If we don't have a nextSibling add a marker node.\n                // We don't have to check if the next node is going to be removed,\n                // because that node will induce a new marker if so.\n                if (node.nextSibling === null) {\n                    parent.insertBefore(document.createTextNode(''), node);\n                }\n                else {\n                    index--;\n                }\n                currentNode = previousNode;\n                partIndex++;\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\n/**\n * Returns a value ready to be inserted into a Part from a user-provided value.\n *\n * If the user value is a directive, this invokes the directive with the given\n * part. If the value is null, it's converted to undefined to work better\n * with certain DOM APIs, like textContent.\n */\nexport const getValue = (part, value) => {\n    // `null` as the value of a Text node will render the string 'null'\n    // so we convert it to undefined\n    if (isDirective(value)) {\n        value = value(part);\n        return directiveValue;\n    }\n    return value === null ? undefined : value;\n};\nexport const directive = (f) => {\n    f.__litDirective = true;\n    return f;\n};\nconst isDirective = (o) => typeof o === 'function' && o.__litDirective === true;\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const directiveValue = {};\nconst isPrimitiveValue = (value) => value === null ||\n    !(typeof value === 'object' || typeof value === 'function');\nexport class AttributePart {\n    constructor(instance, element, name, strings) {\n        this.instance = instance;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.size = strings.length - 1;\n        this._previousValues = [];\n    }\n    _interpolate(values, startIndex) {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const v = getValue(this, values[startIndex + i]);\n            if (v && v !== directiveValue &&\n                (Array.isArray(v) || typeof v !== 'string' && v[Symbol.iterator])) {\n                for (const t of v) {\n                    // TODO: we need to recursively call getValue into iterables...\n                    text += t;\n                }\n            }\n            else {\n                text += v;\n            }\n        }\n        return text + strings[l];\n    }\n    _equalToPreviousValues(values, startIndex) {\n        for (let i = startIndex; i < startIndex + this.size; i++) {\n            if (this._previousValues[i] !== values[i] ||\n                !isPrimitiveValue(values[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    setValue(values, startIndex) {\n        if (this._equalToPreviousValues(values, startIndex)) {\n            return;\n        }\n        const s = this.strings;\n        let value;\n        if (s.length === 2 && s[0] === '' && s[1] === '') {\n            // An expression that occupies the whole attribute value will leave\n            // leading and trailing empty strings.\n            value = getValue(this, values[startIndex]);\n            if (Array.isArray(value)) {\n                value = value.join('');\n            }\n        }\n        else {\n            value = this._interpolate(values, startIndex);\n        }\n        if (value !== directiveValue) {\n            this.element.setAttribute(this.name, value);\n        }\n        this._previousValues = values;\n    }\n}\nexport class NodePart {\n    constructor(instance, startNode, endNode) {\n        this.instance = instance;\n        this.startNode = startNode;\n        this.endNode = endNode;\n        this._previousValue = undefined;\n    }\n    setValue(value) {\n        value = getValue(this, value);\n        if (value === directiveValue) {\n            return;\n        }\n        if (isPrimitiveValue(value)) {\n            // Handle primitive values\n            // If the value didn't change, do nothing\n            if (value === this._previousValue) {\n                return;\n            }\n            this._setText(value);\n        }\n        else if (value instanceof TemplateResult) {\n            this._setTemplateResult(value);\n        }\n        else if (Array.isArray(value) || value[Symbol.iterator]) {\n            this._setIterable(value);\n        }\n        else if (value instanceof Node) {\n            this._setNode(value);\n        }\n        else if (value.then !== undefined) {\n            this._setPromise(value);\n        }\n        else {\n            // Fallback, will render the string representation\n            this._setText(value);\n        }\n    }\n    _insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    _setNode(value) {\n        if (this._previousValue === value) {\n            return;\n        }\n        this.clear();\n        this._insert(value);\n        this._previousValue = value;\n    }\n    _setText(value) {\n        const node = this.startNode.nextSibling;\n        value = value === undefined ? '' : value;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === Node.TEXT_NODE) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if _previousValue is\n            // primitive?\n            node.textContent = value;\n        }\n        else {\n            this._setNode(document.createTextNode(value));\n        }\n        this._previousValue = value;\n    }\n    _setTemplateResult(value) {\n        const template = this.instance._getTemplate(value);\n        let instance;\n        if (this._previousValue && this._previousValue.template === template) {\n            instance = this._previousValue;\n        }\n        else {\n            instance = new TemplateInstance(template, this.instance._partCallback, this.instance._getTemplate);\n            this._setNode(instance._clone());\n            this._previousValue = instance;\n        }\n        instance.update(value.values);\n    }\n    _setIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _previousValue is an array, then the previous render was of an\n        // iterable and _previousValue will contain the NodeParts from the previous\n        // render. If _previousValue is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this._previousValue)) {\n            this.clear();\n            this._previousValue = [];\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this._previousValue;\n        let partIndex = 0;\n        for (const item of value) {\n            // Try to reuse an existing part\n            let itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                // If we're creating the first item part, it's startNode should be the\n                // container's startNode\n                let itemStart = this.startNode;\n                // If we're not creating the first part, create a new separator marker\n                // node, and fix up the previous part's endNode to point to it\n                if (partIndex > 0) {\n                    const previousPart = itemParts[partIndex - 1];\n                    itemStart = previousPart.endNode = document.createTextNode('');\n                    this._insert(itemStart);\n                }\n                itemPart = new NodePart(this.instance, itemStart, this.endNode);\n                itemParts.push(itemPart);\n            }\n            itemPart.setValue(item);\n            partIndex++;\n        }\n        if (partIndex === 0) {\n            this.clear();\n            this._previousValue = undefined;\n        }\n        else if (partIndex < itemParts.length) {\n            const lastPart = itemParts[partIndex - 1];\n            // Truncate the parts array so _previousValue reflects the current state\n            itemParts.length = partIndex;\n            this.clear(lastPart.endNode.previousSibling);\n            lastPart.endNode = this.endNode;\n        }\n    }\n    _setPromise(value) {\n        this._previousValue = value;\n        value.then((v) => {\n            if (this._previousValue === value) {\n                this.setValue(v);\n            }\n        });\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\nexport const defaultPartCallback = (instance, templatePart, node) => {\n    if (templatePart.type === 'attribute') {\n        return new AttributePart(instance, node, templatePart.name, templatePart.strings);\n    }\n    else if (templatePart.type === 'node') {\n        return new NodePart(instance, node, node.nextSibling);\n    }\n    throw new Error(`Unknown part type ${templatePart.type}`);\n};\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, partCallback, getTemplate) {\n        this._parts = [];\n        this.template = template;\n        this._partCallback = partCallback;\n        this._getTemplate = getTemplate;\n    }\n    update(values) {\n        let valueIndex = 0;\n        for (const part of this._parts) {\n            if (part.size === undefined) {\n                part.setValue(values[valueIndex]);\n                valueIndex++;\n            }\n            else {\n                part.setValue(values, valueIndex);\n                valueIndex += part.size;\n            }\n        }\n    }\n    _clone() {\n        const fragment = document.importNode(this.template.element.content, true);\n        const parts = this.template.parts;\n        if (parts.length > 0) {\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT |\n                   NodeFilter.SHOW_TEXT */, null, false);\n            let index = -1;\n            for (let i = 0; i < parts.length; i++) {\n                const part = parts[i];\n                while (index < part.index) {\n                    index++;\n                    walker.nextNode();\n                }\n                this._parts.push(this._partCallback(this, part, walker.currentNode));\n            }\n        }\n        return fragment;\n    }\n}\n/**\n * Reparents nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), into another container (could be the same container), before\n * `beforeNode`. If `beforeNode` is null, it appends the nodes to the\n * container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    let node = start;\n    while (node !== end) {\n        const n = node.nextSibling;\n        container.insertBefore(node, before);\n        node = n;\n    }\n};\n/**\n * Removes nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), from `container`.\n */\nexport const removeNodes = (container, startNode, endNode = null) => {\n    let node = startNode;\n    while (node !== endNode) {\n        const n = node.nextSibling;\n        container.removeChild(node);\n        node = n;\n    }\n};\n//# sourceMappingURL=lit-html.js.map","import {html, render} from 'lit-html';\n\n/* Register Element */\n\nfunction buildTagName(name) {\n    return [...name].map( (x, i) => {\n        if( x < 'a') {\n            if(i !== 0) {\n                return `-${x.toLowerCase()}`;\n            }\n            return x.toLowerCase();\n        }\n        return x;\n    }).join('');\n}\n\nconst register = (c, shadowRoot) => {\n\n    shadowRoot = shadowRoot || false;\n\n    class RegisteredCustomElement extends c {\n        constructor() {\n            super();\n            if(shadowRoot) {\n                this.attachShadow({mode: 'open'});\n                render(this.template(this.state), this.shadowRoot);\n            } else {\n                render(this.template(this.state), this);\n            }\n        }\n    }\n\n    customElements.define(buildTagName(c.name), RegisteredCustomElement);\n}\n\n/* State management */\n\n\nclass store {\n\n    constructor(state) {\n        this.state = state || {};\n        this._subscriptions = [];\n    }\n\n    getState() {\n        return this.state;\n    }\n\n    subscribe(fn) {\n        this._subscriptions.push(fn);\n    }\n\n    setState(newState) {\n        const oldState = this.state;\n\n        // Replace the two for loops with spread operator in the future\n        let tempState = {};\n        for(let prop in this.state) {\n            tempState[prop] = this.state[prop];\n        }\n\n        for(let prop in newState) {\n            tempState[prop] = newState[prop];\n        }\n\n        this.state = tempState;\n        this._callSubcriptions(oldState);\n    }\n\n    _callSubcriptions(oldState) {\n        for(let i = 0; i < this._subscriptions.length; i++) {\n            this._subscriptions[i](this.state, oldState);\n        }\n    }\n}\n\nconst createStore = (defaultState) => {\n    return new store(defaultState);\n}\n\n/* Inherit class */\n\nclass Paragon extends HTMLElement {\n\n    constructor() {\n        super();\n        this._state = createStore({});\n        this.state = this._state.getState();\n\n        this._state.subscribe((state) => {\n            if(this.shadowRoot) {\n                render(this.template(state), this.shadowRoot);\n            } else {\n                render(this.template(state), this);\n            }\n        });\n    }\n\n    connectedCallback() {\n        if(typeof this.connected === 'function') {\n            this.connected();\n        }\n\n    }\n\n    setState(obj) {\n        this._state.setState(obj);\n        this.state = this._state.getState();\n    }\n\n    query(queryString) {\n        if(this.shadowRoot) {\n            return this.shadowRoot.querySelector(queryString);\n        } else {\n            return this.querySelector(queryString);\n        }\n    }\n\n}\n\n\n\nexport {\n    html,\n    register,\n    Paragon,\n    createStore\n}"],"names":["templateCaches","Map","TemplateResult","[object Object]","strings","values","type","partCallback","defaultPartCallback","this","l","length","html","isTextBinding","i","s","closing","findTagClose","nodeMarker","marker","template","document","createElement","innerHTML","getHTML","render","result","container","templateFactory","templateCache","get","undefined","set","Template","getTemplateElement","instance","__templateInstance","_partCallback","update","TemplateInstance","fragment","_clone","removeNodes","firstChild","appendChild","String","Math","random","slice","markerRegex","RegExp","lastAttributeNameRegex","str","close","lastIndexOf","indexOf","TemplatePart","index","name","rawName","element","parts","walker","createTreeWalker","content","partIndex","nodesToRemove","previousNode","currentNode","nextNode","node","nodeType","hasAttributes","attributes","count","value","attributeNameInPart","exec","attribute","getNamedItem","stringsForAttributeValue","split","push","removeAttribute","nodeValue","parent","parentNode","lastIndex","textContent","insertBefore","createTextNode","previousSibling","Node","TEXT_NODE","nextSibling","n","removeChild","getValue","part","isDirective","directiveValue","o","__litDirective","isPrimitiveValue","NodePart","startNode","endNode","_previousValue","_setText","_setTemplateResult","Array","isArray","Symbol","iterator","_setIterable","_setNode","then","_setPromise","clear","_insert","_getTemplate","itemParts","item","itemPart","itemStart","setValue","lastPart","v","templatePart","size","_previousValues","startIndex","text","t","_equalToPreviousValues","join","_interpolate","setAttribute","Error","getTemplate","_parts","valueIndex","importNode","const","store","state","_subscriptions","getState","subscribe","fn","setState","newState","oldState","tempState","let","prop","_callSubcriptions","createStore","defaultState","Paragon","super","_state","shadowRoot","connectedCallback","connected","obj","query","queryString","querySelector","HTMLElement","c","RegisteredCustomElement","attachShadow","mode","customElements","define","map","x","toLowerCase"],"mappings":"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"}